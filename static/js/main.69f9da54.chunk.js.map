{"version":3,"sources":["utils.ts","types/ItemsPerPage.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","getTotalPagesNumber","total","perPage","Math","ceil","ItemsPerPageType","Pagination","currentPage","onPageChange","totalPagesNumber","pagesToRender","isFirstPageActive","isLastPageActive","className","cn","disabled","href","onClick","event","map","pageNumber","active","items","App","useState","Five","itemsPerPage","setItemsPerPage","setCurrentPage","itemsQuantity","length","itemsToRender","lastPage","number","getNumbersForCurrentPage","id","defaultValue","onChange","e","target","value","Three","Ten","Twenty","htmlFor","currentAnchor","currentTarget","split","Number","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69f9da54.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers: number[] = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n\nexport function getTotalPagesNumber(\n  total: number,\n  perPage: number,\n): number {\n  return Math.ceil(total / perPage);\n}\n\nexport function getNumbersForCurrentPage(\n  total: number,\n  currentPage: number,\n  perPage: number,\n): number[] {\n  if (currentPage === 1) {\n    return getNumbers(1, perPage);\n  }\n\n  const lastPage = getTotalPagesNumber(total, perPage);\n\n  if (currentPage === lastPage && total % perPage !== 0) {\n    const from = total - (total % perPage) + 1;\n\n    return getNumbers(from, total);\n  }\n\n  return getNumbers(1, perPage)\n    .map(number => (number + (perPage * (currentPage - 1))));\n}\n","export enum ItemsPerPageType {\n  Three = 3,\n  Five = 5,\n  Ten = 10,\n  Twenty = 20,\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers, getTotalPagesNumber } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange:\n  (event: React.MouseEvent<HTMLAnchorElement>) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPagesNumber = getTotalPagesNumber(total, perPage);\n  const pagesToRender = getNumbers(1, totalPagesNumber);\n  const isFirstPageActive = currentPage === 1;\n  const isLastPageActive = currentPage === totalPagesNumber;\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={cn('page-item', {\n            disabled: isFirstPageActive,\n          })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirstPageActive}\n            onClick={(event) => {\n              if (!isFirstPageActive) {\n                onPageChange(event);\n              }\n            }}\n          >\n            «\n          </a>\n        </li>\n\n        {pagesToRender.map(pageNumber => (\n          <li\n            className={cn('page-item', {\n              active: currentPage === pageNumber,\n            })}\n            key={pageNumber}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${pageNumber}`}\n              onClick={(event) => onPageChange(event)}\n            >\n              {pageNumber}\n            </a>\n          </li>\n        ))}\n\n        <li\n          className={cn('page-item', {\n            disabled: isLastPageActive,\n          })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPageActive}\n            onClick={(event) => {\n              if (!isLastPageActive) {\n                onPageChange(event);\n              }\n            }}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getNumbers, getNumbersForCurrentPage } from './utils';\nimport { Pagination } from './components/Pagination/Pagination';\nimport { ItemsPerPageType } from './types';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage]\n    = useState<number>(ItemsPerPageType.Five);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n\n  const itemsQuantity = items.length;\n\n  const itemsToRender = getNumbersForCurrentPage(\n    itemsQuantity,\n    currentPage,\n    itemsPerPage,\n  );\n\n  const handleCurrentPage = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    const currentAnchor = event.currentTarget.href.split('#')[1];\n\n    if (currentAnchor === 'next') {\n      setCurrentPage(currentPage + 1);\n\n      return;\n    }\n\n    if (currentAnchor === 'prev') {\n      setCurrentPage(currentPage - 1);\n\n      return;\n    }\n\n    setCurrentPage(Number(currentAnchor));\n  };\n\n  const handleSelectItemsPerPage\n  = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setItemsPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${itemsToRender[0]} - ${itemsToRender[itemsToRender.length - 1]} of ${itemsQuantity})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            defaultValue={itemsPerPage}\n            onChange={(e) => handleSelectItemsPerPage(e)}\n          >\n            <option value={ItemsPerPageType.Three}>\n              {ItemsPerPageType.Three}\n            </option>\n\n            <option value={ItemsPerPageType.Five}>\n              {ItemsPerPageType.Five}\n            </option>\n\n            <option value={ItemsPerPageType.Ten}>\n              {ItemsPerPageType.Ten}\n            </option>\n\n            <option value={ItemsPerPageType.Twenty}>\n              {ItemsPerPageType.Twenty}\n            </option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={itemsQuantity}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={handleCurrentPage}\n      />\n\n      <ul>\n        {itemsToRender.map(item => (\n          <li data-cy=\"item\" key={item}>\n            {`Item ${item}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}